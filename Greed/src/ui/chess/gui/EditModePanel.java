/**********************************************
 * Greed, a chess engine written in java.
 * Copyright (C) 2019 Ahmet Baþar
 * 
 * This file is part of Greed.
 * 
 * Greed is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Greed is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Greed.  If not, see <https://www.gnu.org/licenses/>.
 **********************************************/
package chess.gui;

import java.awt.Color;
import java.util.HashMap;

import chess.engine.EngineConstants;

public class EditModePanel extends javax.swing.JPanel {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form EditModePanel
     */
	private BaseGui base;
    private Cell baseCell;
    private HashMap<String, EditModeCell> cellList = new HashMap<String, EditModeCell>();
    private byte lastUsedItem;

    public EditModePanel(BaseGui base) {
        this.base = base;
        initComponents();
        initCells();
        startNewGame();
    }

    public void setBaseCell(Cell baseCell) {
        this.baseCell = baseCell;
    }

    public Cell getBaseCell() {
        return baseCell;
    }

    public void initCells() {
        EditModeCell cell;
        int xLoc, yLoc = 0;
        Color black = new Color(122, 177, 222);
        for (int x = 0; x < 7; x++) {
            for (int y = 0, Z = 0; y < 2; y++) {
                Z = Z + 2;
                cell = new EditModeCell(baseCell, base);
                cell.setName(x + "" + (y + 3 - Z));
                cell.setCellColor(black);
                xLoc = cell.getWidth() * x + 5;
                yLoc = cell.getHeight() * y + 5;
                cell.setLocation(xLoc, yLoc);
                add(cell);
                cellList.put(cell.getName(), cell);
            }
        }
    }

    public void startNewGame() {
        ((EditModeCell) cellList.get(0 + "" + 0)).setItem(EngineConstants.WHITE_PAWN);
        ((EditModeCell) cellList.get(0 + "" + 1)).setItem(EngineConstants.BLACK_PAWN);
        ((EditModeCell) cellList.get(1 + "" + 0)).setItem(EngineConstants.WHITE_KNIGHT);
        ((EditModeCell) cellList.get(1 + "" + 1)).setItem(EngineConstants.BLACK_KNIGHT);
        ((EditModeCell) cellList.get(2 + "" + 0)).setItem(EngineConstants.WHITE_BISHOP);
        ((EditModeCell) cellList.get(2 + "" + 1)).setItem(EngineConstants.BLACK_BISHOP);
        ((EditModeCell) cellList.get(3 + "" + 0)).setItem(EngineConstants.WHITE_ROOK);
        ((EditModeCell) cellList.get(3 + "" + 1)).setItem(EngineConstants.BLACK_ROOK);
        ((EditModeCell) cellList.get(4 + "" + 0)).setItem(EngineConstants.WHITE_QUEEN);
        ((EditModeCell) cellList.get(4 + "" + 1)).setItem(EngineConstants.BLACK_QUEEN);
        ((EditModeCell) cellList.get(5 + "" + 0)).setItem(EngineConstants.WHITE_KING);
        ((EditModeCell) cellList.get(5 + "" + 1)).setItem(EngineConstants.BLACK_KING);
        ((EditModeCell) cellList.get(6 + "" + 0)).setItem((byte)0);
        ((EditModeCell) cellList.get(6 + "" + 1)).setItem((byte)0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }
    
    public void setLastUsedItem(byte lastUsedItem) {
		this.lastUsedItem = lastUsedItem;
	}
    
    public byte getLastUsedItem() {
		return lastUsedItem;
	}
    
    public void reEditCell(){
        base.getEditModePanel().getBaseCell().setItem(lastUsedItem);
        base.getEditModeFrame().setVisible(false);
    }
}
