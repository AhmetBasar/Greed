/**********************************************
 * Greed, a chess engine written in java.
 * Copyright (C) 2019 Ahmet Baþar
 * 
 * This file is part of Greed.
 * 
 * Greed is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Greed is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Greed.  If not, see <https://www.gnu.org/licenses/>.
 **********************************************/
  - Add King Checks to quiescent search. because they are not quiet, maybe there is a forced mate line. you may also add thread moves? so what is threating moves?
  Engine improvements.
 - Add checks to quiescent search.
 - implement parallel search.
 [OKEY] - implement Board infrastructure instead of copy make solution.
 [OKEY] - in the MoveGenerationCaptured class, castling moves are also generating. I think it is unnecessary. Remove it.
 [OKEY] - In quiescence search, we do not need to calculate zobrist key. So implement a method in Board class, named doMoveWithoutZobrist .
 [OKEY] - Transposition table structure must be reviewed. especially ttBestMove = ttElement.bestMove; code block is outside depth if block.
 [OKEY] - do real move ordering, remove ttbestmove if block, try ttbestmove first instead FAILED because we should do incremental move generation. first validate ttmove than generate validate killer moves than generate capture moves etc. 
 [OKEY] - Remove castling moves from move generationCaptures class.
  - Use tagging.
  - there should be more elegant Quiescence search algorithm that prune bad captures.
  - isKingInCheck method is too slow for serious engine. It must be faster. For example incremental attackBitboard implementation should be used.
 [OKEY] - In Move Generation you must generate pseudolegalmoves. You should not invoke isKingInCheck method in castling move generation!!!
  - Evaluation function must be improved.. Maybe mobility implementations.
 [OKEY] - In Board.java use an array for keep calculated zobrist values.
  - bestMove is not correctly implemented. because of uncompleted nodes do not prove best move..
 [OKEY] - Implement more elegant way to handle board object. This is very inefficient.
 [OKEY] - In the Fail Soft transposition table implementation, if bestMove!=0 than record tt. Why not always??? (aka, regardless of bestMove!=0)
  - IN PVS search with fail hard framework. is it a<score<b or a<score ???[OKEY]
  - In null move pruning, one should also check the current node is PV or not.. and game phase should no be pawn ending because of zugzwang issues. 
 [OKEY] - In null move pruning R (Reduction factor) must be variable.
 [OKEY] - In null move pruning there is a big cost about of isKingInCheck method invocation.
 [OKEY] - Check extensions..
  - Implement Verified Null Move Pruning.
 [OKEY] - Implement Static Null Move Pruning.
  - Omit Null Move on PV Nodes.  
 [OKEY] - In null move pruning it is unnecessary to undoNullMove because zobrist key is always used from depthPlusOne.
  - Pondering implementation!!
  - Null Move pruning condition must be beta - alpha <=1 !!!
  - Implement killer move verification. Instead of generate all moves. this saves a huge amount of time :D
  - Implement game phase. Opening, Middle, End.
  - Store only quiet moves in the killer move array. quiet move means no captures, no promotions. and maybe no checks.
  - Search captures with see first. Then killer and history moves.
 [OKEY] - Implement pawn hash table!
 [OKEY] - Implement generateCheckEvasions Method!
  - Write a comprehensive Unit Test for evaluation Function!!
 [OKEY] - Implement Mate scoring which is related with depth parameter. in order to find fastest mate.
  - Evaluation: Add bonus for tempo. Whose turn?
  - Evaluation: Check for pawn shield! 
  - If previous move was check move, then extend it!
 [OKEY] - Good trick to test evaluation function that, reverse table and compare results!..
  - Implement single reply extension. if there is a single valid move than increment 1 ply.
  - Implement late move reductions.
 [OKEY] - Implement 50 move rule.
 [OKEY] - Implement threefoldrepetition in search tree. with correct way. not with gui history!
  - Implement mate detetion with more elegant way. not simply return 0 as move.
  - Review existing code. for example there should be more condition in nullmove pruning. like in pvs do not do null move pruning.
  - Implement SSE.
 [OKEY] - Implement magic bitboard.
 [OKEY] - Implement automated-Testing Framework that is capable of running thousands of games concurrently.
  - Implement aspirationWindows
 [OKEY] - Implement basic opening book or maybe advanced.
  - Implement Mobility Evaluation!
  - King safety.
  - PVS on root node, LMR on root node.
  - Implement History Heuristic.
  - Implement PV Extraction.
 [OKEY] - Implement threefold repetition for Search tree. Independent of game history!!! we already implemented for game history. but it does not work flawlessly
 [OKEY] - Do not try ttBest move again!
  - NULL MOVE PRUNING on pv nodes?
  - Implement insufficient material draw score... Very Important for draw blunders. Engine must be undrawable.
  - Give a penalty if fiftymovecounter > 90 or 80 in order not to go draw surprisingly.
  - after timeout last iteration search(uncompleted) is waste of time or not?
  - Implement ÞAT! We already implement AT but ÞAT is little more expensive calculation.
  - Compare check extension ELO gain.
  - Correct the fifty move rule. There must not be checkers and >= 100. 1 of Millions probablity that 50. move gives a check mate lol.
  [OKEY] - Implement nullMoveCounter implementation in threefoldRepetition detection.
  - Some of programs gives draw score after 3 rep. no 1 rep... see: Again, rep-draws (and score aging) and see: draw by repetition
  [OKEY] - Implement nullMoveCounter in the draw detection.
  [OKEY] - Implement draw detection for PREMOVEFINDER.
  - In draw detection, reordering 50moverule detection and 3fold rep detection. because 3rep has much more probability to return early without branching for 50moverule check.
  [OKEY] - In draw detection, Merge game history and search history. or at least, merge functions, if counter < 4 than do not try game history at all.
  [OKEY] - Try more agressive Null Move Pruning i.e. adaptive R. if depth > 6 than R = 3 else 2.
  - Search what lazyEval is.
  - Increase TT size. (very important.)
  [OKEY] - Increasing R with Depth
  - R=3; if sideto move has 2 or more pieces, and depth > 7 then R = 4
  - Implement verified Null Move Pruning.
  - Implement History Heuristic.
  [OKEY] - When the king is in check. than generate only check evasions. (this might be blowing.)
  - Watchout, there is a topic in the wiki as Square attacked By...
  [OKEY] - Do not recalculate occupancy bitboard every cycle, use incrementaly updated bitboard instead.
  - Implement IID!
  - Implement lazy evaluation.
 [OKEY] - Implement pawn hash table.
 [OKEY] - Embedded database might be useful for opening book.
 [OKEY] - Implement Passed Pawn Evaluation.
  - We calculate isolated paws as if we use quare centric board representation. But we can calculate all pawns with one run, thanks to bitboards.
  - Implement candidate pawn evaluation.
  - Implement weak pawn evaluation.
  - Rewrite the evaluation function based on set-wise. Not Square centric.
  - Remove King value evalution from the evaluation function.
 [OKEY] - Implement Passed Pawn Evaluation.
 [OKEY] - Implement Magic Bitboards.
  - Implement double hashing to resolve collision.
  - Implement Eval Hash.
  - Use bucket in TT to use effectively.
 [OKEY] - Implement detailed perft fo Kindergarten Move Generator. (like checkmate count, enpassant count vs.vs.)
  - Detect zugzwang for Null Move Pruning.
  - Implement verified Null Move Pruning. 
  - Do Not Terminate search at odd plies.
  - Do two ply increment in Transposition table!!!
    - Do two ply increment in Transposition table!!!
      - Do two ply increment in Transposition table!!!
        - Do two ply increment in Transposition table!!!
  - Asymmetric Evaluation
  - Odd-Even Effect
  - Implement fractional plies!
 [OKEY] - Compare performances of &= x - 1 and &= ~(1 << x)
  - If we use C++ then there is a method called__builtin_ctzll . It does (1L << i) for you for free.
 [OKEY] - optimize Transformer methods.
 [OKEY] - Write unit test for Transformer class.
 [OKEY] - write pawn attack lookup. Especially for Legality class.
  - Use Java's fantastic Assertion.
 [OKEY]  => in doMove function, the captured piece cannot be KING.
 [OKEY]  => in doMove function, the captured piece cannot be friendly Piece.
 [OKEY]  => in doMove function, calculate cached datas and compare them with cache. They have to be equal.
  - Implement game phasing.
  - Implement pure switch case methods. Instead of calculations.
 [OKEY] - Implement Incrementaly updated friendly, occupied and enemy pieces. do not calculate on each iteration.
 [OKEY] - Implement pinned and discovered pieces.
  - Write move validator! for killer moves, do not generate them, simply validate them.
  - Write class that holds detailed data about search result called Statistics. pawnHashHitCount vs.vs. NullMoveHits, NullMoveMiss etc. tthit, ttmiss,
  - while probing scores from TT, correct scores if MATE_BOUND exceeds. Regarding distance + MATE_SCORE.
 [OKEY] - TRY to generate white and black pawn moves in a seperate manner.
  - implement immutable classes for possible MultiThreading issues.
  - Review all code. (bot and ui included.) (Need some caching. especially in UI side.)
 [OKEY] - Cache UI icons. (Cell.java) (new File)
  - Cache Timer objects. (PieceEffects.java) (new Timer)
 [OKEY] - maintain a material key for draw by material detection! this is very very important issue!!!
  - implement uci protocol to play tournaments with popular engines.
  - implement castling rights as byte or int instead of byte array. (For speed up.)
 [OKEY] - Remove King material evaluation cause there is always 1 king per side.
 [OKEY] - There is difference between FEN standart and POLYGLOT standart about enpassant capturing. What is correct way? What are other engines do?
 [OKEY] - There may be easy way to calculate enpassant target. Like PreCalculated table.
 [OKEY] - Correct zobrist hashing when double push occurs if ((EngineConstants.PAWN_ATTACK_LOOKUP[side][epTarget] & bitboard[opSide | EngineConstants.PAWN]) != 0)
 [OKEY] - Avoid class variables. use method variables amap. (e.g. in Legality.java class there are redundant class variables called rightMoves, leftMoves, upMoves, downMoves, moves_45, moves_135, moves_225, moves_315, lookup)
 [OKEY] - remove unnecessary method parameters in negamax framework. like previousmove, firstmove.
  - Rewrite opening book utility with Binary Search algorithm. It will be much faster IMHO.
  - Prepare large opening book. (ENORMOUS)
  - increase max heap size. and compare performances. (-Xms512m -Xmx4g)
  - Increase TT size.
 [OKEY] - Adjust timecontroller thread frequency.
  - Change evaluation function as setwise calculations.
  - Implement buffered stream in Storage class for speed up.
  - implement contempt factor for DRAW scoring.
 [OKEY] - Assert there always exists one King per side.
  - Do not use interface because of performance overhead. but it may be negligible as compared to clean code.
 [OKEY] - Code review for using >>> instead of >> (SEARCH WITH REGEX PATTERN TO DO IT EASYLY)  regex1 = (?<!>)>>(?!>)  regex2 = [^>]>>[^>]
 [OKEY] - Code review for using != 0 instead of > 0 (SEARCH WITH REGEX PATTERN TO DO IT EASYLY)
  - return too high values from evaluation function then run tournamet to find subtle bugs.
 [OKEY] - Code review for not use 1. use 1L instead. This may lead subtle bugs. (SEARCH WITH REGEX PATTERN TO DO IT EASYLY)
  - Implement all pawn evaluations. such as weak and backward pawns.
  - Use precalculated singlebit lookup for all 1L << n operations.
  - Java performance optimizations. (such as static final methods.)
 [OKEY] - do not use shared objects. Review code. do not use static variables. but static method is permitted.
  - if there is no castling rights, call move generator that doesn't search castling moves.
 [OKEY] - ttBestMove is tried first. but then, all possible moves are tried. do we need to try ttBestMove again?
  - capture moves should be handled by see, not killer heuristic.
  - return contempt factor.
  - do not use while loop to iterate kings. As there is always one king per side on the board..
  - write pawn shield evaluation in a more smarter way. (i.e. faster)
  - change isEndGame evaluation. (must be independent from side to move)
  - in all run methods, use try catch block and invoke printStackTrace and System.exit(1); methods from catch block. Search that "void run"
 [OKEY] - Write a test method that scans source code and detects static variables, signed right shift operators etc. etc.
 [OKEY] - Write a smart assertion mechanishm that has no effect on performance.
 [OKEY] - write incremental occupied bitboard calculation. it may be far better in best case thanks to good move ordering.
  - custom thread pool does not use 100 percent cpu, but util concurrent does. why?
  - Do not use singleton pattern!
  - Use TimerPool for PieceEffects class.
  - prefer eager initialization instead of lazy one.
  - do Exclusive Or operation for incremental update of BitBoards. it will be much more efficient.
  - rewrite resetTT method with smarter way, maybe Arrays.fill
  [OKEY] - rewrite PREMOVEFINDER with modern implementations.
  - Use switch case statement when checking the piece is WhitePawn or BlackPawn in PawnZobristkey calculation.
  - Implement insufficient material evaluation on both engine side and gui side.
  - Implement smart time handling for chess bot. evaluate iterative deepening time consumed per iteration.
  - enable jvm inline log parameter.
  - try to minimize method code line number to help jvm method inlining.
  - Write full functionality for MagicBitboardTest class. Not only testing magic numbers, but also occupancy variations etc.
  - use JITWATCH and -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining
  - divide long methods for JIT method InlineIng.
  - Implement Counter Moves.
  - change move representation that contains captured piece type. Than change, QuiescenceFutilityPruning how to get captured piece code block. if EpCapture than captured piece is pawn etc.
  - Change null move pruning conditions. e.g. only for non PV nodes.
  - do not invoke search method with EDT.
  - Test and debug Quiescence futility pruning.
  - Try incremental piece square tables implementation aka psqt..
  - Do not use byte. Use integer instead.
  - Write lots of runtime assertions. For each methods.
  - change castling right to single integer mask.
  - change castling ZobristKey update in doMove method. It is very inefficient.
  - Implement Eval Cache.
  - Delete doMoveWithoutZobrist and undoMoveWithoutZobrist method.
  - Do not use interface for high frequency usages.
  - do not sort move array if no move is available.
  - iskingincheck method aka superpiece implementation. is it good to terminate early or do all or operations and single check whether the king is in check or not
  - never leave empty catch blocks. Never Ever!
  - never leave empty catch blocks. Never Ever!
  - Test iterative deepening speed. try directly maxdepth. and try iterative deepening and compare times consumed.
  - remove nullmovecounter in threefoldrepetition and compare results.
  - do not do any operations in for-while loop's conditional statement.
  [OKEY] - change isLeadsToDraw method. Do not use HashMap history. Initialize board object by copying UiZobristKey history to board ZobristKey history instead.
  [OKEY] - Change calculating epTarget algorithm. It seems very inefficient.
  - Change jvm heap size parameters and compare performances. -Xms -Xmx
  - Large arrays are too slow. Maybe there is some hotspot GC parameters to increase performance.
  - Write lots of assertions.
  - Write comprehensive profiler(with gui, e.g. x-y diagram) for testing classes like, Engine tournament or Engine Equality comparator.
  [OKEY]- remove unused method parameters at both engine and board classes.
  - remove depth == 30 break; condition.
  - Write testing class for Check.
  - Change checkers detection implementation. No need to invoke super piece method when it is not discovered move and not promotion, not ep but normal move.
  - test checkers implementation again with legality.
  - Rewrite generate castling moves method. it is very inefficient.
  - rewrite generate pawn moves method with branchless implementation, than compare performances.
  - (ISSUE-1)in generateOutOfCheckAttacks method in MoveGeneration class, change implementation of generateEpAttacks (TODO: must not be pinned. And epSquare must be checker!)
     Wont fix. what if sliding attacker, own pawn, enemy pawn and own king are in the same row. how would you detect whether it is legal or not, without domove undomove???
  - (very important)in generateOutOfCheckAttacks method in MoveGeneration class, change implementation of generatePawnAttacksAndPromotions (TODO: prevent promotion move here. but not promotion attack!)
  - (very important)for pinned piece move generation, write methods for single fromPiece cases(lowestOneBit). (to prevent extra effort for while condition and a &= a - 1 calculation) and pass "from" parameter to prevent extra effort for numberoftrailingzeros invocation.
  - Write single line methods for inlineing. For example write method named getMoveType instead of executing directly move & 0x00070000
  - rewrite checkers detection. When the move is not discovered and quiet than can be detected very fast.
 [OKEY] - write genFen method, than write new perft test suite that tests generateOutOfCheckAttacks method of the MoveGeneration class for generatePawnAttacksAndPromotions method invocation. check evasion with simple promotion move but not promotion attack.
  - DO NOT USE BYTE. because integer casting is too expensive :( use integer as much as possible.
  - change move structure.
  - change castling right structure.
 [OKEY] - delete moveLists field from IBoard.
 [OKEY] - Do not use Legality in engine class anymore.
 [OKEY] - do we really need to check whether the king is in check when trying ttBestMove???
  - Use material score cache in evaluation.
  - Heap memory is growing up consistently when tournament is running(when 15.000 games are played, then 2 g heap is used). Use profiler to detect possible memory leaks.
  - Replace ~EngineConstants.FILE_A with EngineConstants.NOT_FILE_A
  - Replace ~EngineConstants.FILE_H with EngineConstants.NOT_FILE_H
  - Implement Cloneable interface on Board object.
 [OKEY] - Implement reflectionBased comparison in SearchResult class.
  - review isLegal method in Board class.
  - write test class for Static Exchange Evaluation class.
  - Enable Static Exchange Evaluation in quiescence search.
  - isInsufficientMaterial method implementation : handle KPK, KBPK, KBPKP
  - implement XOR instead of &= ~(1L << to). Much more efficient. e.g. ^= to
 [OKEY] - in MoveGeneration, at generateKingQuietMoves, there exist always a king for each side, so it is unnecessary to check if ((from = Long.numberOfTrailingZeros(fromBitboard)) != 64) {
  - Do not use LegalityV4 class anoymore.  Too expensive.
  - Is it necessary to check epT == 0 at isLegalEPCaptureMove method? chess22k does!
  - Write test method for IBoard.isValid(int move) method.
    - Write test method for IBoard.isValid(int move) method.
      - Write test method for IBoard.isValid(int move) method.
        - Write test method for IBoard.isValid(int move) method.
          - Write test method for IBoard.isValid(int move) method.
            - Write test method for IBoard.isValid(int move) method.
 - Implement History Move values
 - Implement Counter Move Heuristic.
 - experiment whether add killer incheck or not.
 - check insufficient material in negamax algorithm.